# vi: ft=fish

# -- XDG ---------------------------------------------------------------------------------------------------------------

# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
set -q XDG_CONFIG_HOME; or set -Ux XDG_CONFIG_HOME $HOME/.config
set -q XDG_DATA_HOME; or set -Ux XDG_DATA_HOME $HOME/.local/share
set -q XDG_STATE_HOME; or set -Ux XDG_STATE_HOME $HOME/.local/state
set -q XDG_CACHE_HOME; or set -Ux XDG_CACHE_HOME $HOME/.cache

for xdgdir in (path filter -vd $XDG_CONFIG_HOME $XDG_DATA_HOME $XDG_STATE_HOME $XDG_CACHE_HOME)
    mkdir -p $xdgdir
end

# -- RECURSIVE PATHS ---------------------------------------------------------------------------------------------------

# Allow subdirs for functions and completions.
set fish_function_path (path resolve $__fish_config_dir/functions/*/) $fish_function_path
set fish_complete_path (path resolve $__fish_config_dir/completions/*/) $fish_complete_path

# -- MACOS COLORSCHEME -------------------------------------------------------------------------------------------------

defaults read -g AppleInterfaceStyle >/dev/null 2>&1; and set -gx MACOS_IS_DARK yes; or set -gx MACOS_IS_DARK no

set -gx CATPPUCCIN_FLAVOR "Catppuccin $([ $MACOS_IS_DARK = yes ]; and echo Macchiato; or echo Latte)"

fish_config theme choose $CATPPUCCIN_FLAVOR

# -- CACHE -------------------------------------------------------------------------------------------------------------

# Setup caching
if not set -q __fish_cache_dir
    if set -q XDG_CACHE_HOME
        set -U __fish_cache_dir $XDG_CACHE_HOME/fish
    else
        set -U __fish_cache_dir $HOME/.cache/fish
    end
end

test -d $__fish_cache_dir; or mkdir -p $__fish_cache_dir

# Remove expired cache files
find $__fish_cache_dir -name '*.fish' -type f -mmin +1200 -delete

# -- FISHER ------------------------------------------------------------------------------------------------------------

set -q fisher_path || set -gx fisher_path $__fish_config_dir/.fisher
set -q my_plugins_path || set -gx my_plugins_path $__fish_config_dir/plugins

if test "$fisher_paths_initialized" != true
    set --local idx (contains -i $__fish_config_dir/functions $fish_function_path || echo 1)
    set fish_function_path $fish_function_path[1..$idx] $fisher_path/functions $fish_function_path[(math $idx + 1)..]

    set --local idx (contains -i $__fish_config_dir/completions $fish_complete_path || echo 1)
    set fish_complete_path $fish_complete_path[1..$idx] $fisher_path/completions $fish_complete_path[(math $idx + 1)..]

    set -g fisher_paths_initialized true
end

if not test -d $fisher_path
    functions -e fisher &>/dev/null
    mkdir -p $fisher_path
    touch $__fish_config_dir/fish_plugins
    curl -sL https://git.io/fisher | source

    if test -s $__fish_config_dir/fish_plugins
        fisher update
    else
        fisher install jorgebucaran/fisher
    end
end

for file in $fisher_path/conf.d/*.fish
    if ! test -f $__fish_config_dir/conf.d/(path basename -- $file)
        and test -f $file && test -r $file
        builtin source $file
    end
end

# -- OH MY POSH --------------------------------------------------------------------------------------------------------

set fish_greeting

if type -q oh-my-posh
    set --local omp_ver $(oh-my-posh --version)
    set --local omp_path $__fish_cache_dir/omp_init_$omp_ver.fish

    if not test -r $omp_path
        oh-my-posh init fish --config $XDG_CONFIG_HOME/oh-my-posh/config.json >$omp_path
    end

    source $omp_path
end

# -- BREW --------------------------------------------------------------------------------------------------------------

# Setup homebrew 
if not set -q HOMEBREW_PREFIX
    if not test -s $__fish_cache_dir/brew_init.fish
        /opt/homebrew/bin/brew shellenv >$__fish_cache_dir/brew_init.fish
    end

    source $__fish_cache_dir/brew_init.fish
end

# Add fish completions
if test -e "$HOMEBREW_PREFIX/share/fish/completions"
    set --append fish_complete_path "$HOMEBREW_PREFIX/share/fish/completions"
end

# Other homebrew vars
set -q HOMEBREW_NO_ANALYTICS || set -gx HOMEBREW_NO_ANALYTICS 1

# -- ASDF --------------------------------------------------------------------------------------------------------------

# ASDF configuration code
if test -z $ASDF_DATA_DIR
    set _asdf_shims "$HOME/.asdf/shims"
else
    set _asdf_shims "$ASDF_DATA_DIR/shims"
end

# Do not use fish_add_path (added in Fish 3.2) because it
# potentially changes the order of items in PATH
if not contains $_asdf_shims $PATH
    set -gx --prepend PATH $_asdf_shims
end

set --erase _asdf_shims

set -q ASDF_CONFIG_FILE; or set -Ux ASDF_CONFIG_FILE $HOME/.config/asdf/asdfrc

if not test -e $__fish_config_dir/completions/fish.fish
    asdf completion fish >$__fish_config_dir/completions/asdf.fish
end

## -- MISE -------------------------------------------------------------------------------------------------------------

if not set -q MISE_SHELL
    set -gx MISE_INSTALL_PATH /opt/homebrew/bin/mise

    if not test -s $__fish_cache_dir/misej_init.fish
        mise activate fish >$__fish_cache_dir/mise_init.fish
    end

    source $__fish_cache_dir/mise_init.fish

    if not test -e $__fish_config_dir/completions/mise.fish
        mise completion fish >$__fish_config_dir/completions/mise.fish
    end
end

# -- CHEZMOI -----------------------------------------------------------------------------------------------------------

if not test -e $__fish_config_dir/completions/chezmoi.fish
    chezmoi completion fish >$__fish_config_dir/completions/chezmoi.fish
end

# -- FZF ---------------------------------------------------------------------------------------------------------------

if type -q fzf
    if not test -r $__fish_cache_dir/fzf_init.fish
        fzf --fish >$__fish_cache_dir/fzf_init.fish
    end

    source $__fish_cache_dir/fzf_init.fish

    # https://github.com/catppuccin/fzf?tab=readme-ov-file#usage
    if [ $MACOS_IS_DARK = yes ]
        source $fisher_path/themes/catppuccin-fzf-macchiato.fish
    else
        source $fisher_path/themes/catppuccin-fzf-latte.fish
    end

    set -gxa FZF_DEFAULT_OPTS "--reverse --height '100%' \
		--bind ctrl-b:preview-up,ctrl-f:preview-down\
		--bind ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down\
		--bind 'ctrl-/:change-preview-window(hidden|)'\
		--preview-window 'right:60%'"
    set -gx FZF_DEFAULT_COMMAND "fd --type f --strip-cwd-prefix --hidden --follow"
    set -gx FZF_CTRL_T_COMMAND "$FZF_DEFAULT_COMMAND"
    set -gxa FZF_CTRL_T_OPTS "--preview 'bat {}'"

    # https://github.com/PatrickF1/fzf.fish?tab=readme-ov-file#integrate-with-a-diff-highlighter
    set fzf_diff_highlighter diff-so-fancy
end

# -- ZOXIDE ------------------------------------------------------------------------------------------------------------

if type -q zoxide
    if not test -r $__fish_cache_dir/zoxide_init.fish
        zoxide init fish >$__fish_cache_dir/zoxide_init.fish
    end

    source $__fish_cache_dir/zoxide_init.fish
end

# -- PAGER -------------------------------------------------------------------------------------------------------------

set -Ux MANPAGER nvim +Man!

# Ensure manpath is set to something so we can add to it.
set -q MANPATH || set -gx MANPATH ''

# Add more man page paths.
for manpath in (path filter $__fish_data_dir/man /usr/local/share/man /usr/share/man)
    set -a MANPATH $manpath
end

# -- VI MODE -----------------------------------------------------------------------------------------------------------

fish_vi_key_bindings

bind -M visual y fish_clipboard_copy
bind -M normal yy fish_clipboard_copy
bind p fish_clipboard_paste

function rerender_on_bind_mode_change --on-variable fish_bind_mode
    if test "$fish_bind_mode" != "$FISH__BIND_MODE"
        set -gx FISH_BIND_MODE $fish_bind_mode
        omp_repaint_prompt
    end
end

function fish_default_mode_prompt --description "Display vi prompt mode"
    # This function is masked and does nothing
end

# -- EDITOR ------------------------------------------------------------------------------------------------------------

# Set editor variables.
set -q EDITOR; or set -Ux EDITOR nvim
set -q VISUAL; or set -Ux VISUAL $EDITOR
set -q GIT_EDITOR; or set -Ux GIT_EDITOR $EDITOR

# -- SECRETS -----------------------------------------------------------------------------------------------------------

set -gx OPENAI_API_KEY "{{ (keepassxcAttribute "OPENAI" "API_KEY") }}"
set -gx GITLAB_TOKEN "{{ (keepassxcAttribute "GITLAB" "TOKEN") }}"
set -gx GITHUB_TOKEN "{{ (keepassxcAttribute "GITHUB" "TOKEN") }}"

# -- ABBRS -------------------------------------------------------------------------------------------------------------

if status is-interactive
    abbr -a -- e nvim
    abbr -a -- y yazi
    abbr -a -- c "clear && exec fish"
    abbr -a -- ca chezmoi apply
    abbr -a -- ee nvim_config_pick
    abbr -a -- eu "nvim --headless '+Lazy! update' +qa && nvim"
    abbr -a -- f "for i in (seq 1 5); /usr/bin/time fish -i -c exit; end"
    abbr -a -- q exit

    abbr -a -- gb git branch -vv
    abbr -a -- gba git branch -vv -a
    abbr -a -- gbsup git branch --set-upstream-to=origin/\(__git.current_branch\)
    abbr -a -- gc! git commit -v --amend
    abbr -a -- gcn! git commit -v --no-edit --amend
    abbr -a -- gf git fetch
    abbr -a -- gfa git fetch --all --prune
    abbr -a -- gl git pull
    abbr -a -- gp git push
    abbr -a -- gpsup git push --set-upstream origin \(__git.current_branch\)
    abbr -a -- gp! git push --force-with-lease
    abbr -a -- gco git checkout
    abbr -a -- gcod git checkout develop
    abbr -a -- gcom git checkout main
    abbr -a -- gfb git flow bugfix
    abbr -a -- gff git flow feature
    abbr -a -- gfr git flow release
    abbr -a -- gfh git flow hotfix
    abbr -a -- gfs git flow support
    abbr -a -- gfbs git flow bugfix start
    abbr -a -- gffs git flow feature start
    abbr -a -- gfrs git flow release start
    abbr -a -- gfhs git flow hotfix start
    abbr -a -- gfss git flow support start
    abbr -a -- gfbt git flow bugfix track
    abbr -a -- gfft git flow feature track
    abbr -a -- gfrt git flow release track
    abbr -a -- gfht git flow hotfix track
    abbr -a -- gfst git flow support track

    alias nr "npm run"

    alias ls "eza $eza_params"
    alias l "eza --git-ignore $eza_params"
    alias ll "eza --all --header --long $eza_params"
    alias llm "eza --all --header --long --sort=modified $eza_params"
    alias la "eza -lbhHigUmuSa"
    alias lt "eza --tree $eza_params"
end

# -- EZA --------------------------------------------------------------------------------------------------------------

set -l COLORS (vivid generate catppuccin-$([ $MACOS_IS_DARK = yes ]; and echo macchiato; or echo latte))

set -gx LS_COLORS $COLORS
set -gx EZA_COLORS $COLORS

# -- PATH --------------------------------------------------------------------------------------------------------------

set -gx GOPATH $HOME/Library/go

# https://webostv.developer.lge.com/develop/tools/cli-installation
set -gx LG_WEBOS_TV_SDK_HOME "$HOME/stv-tools/webos-sdk"
set -gx WEBOS_CLI_TV "$LG_WEBOS_TV_SDK_HOME/bin"

fish_add_path $GOPATH
fish_add_path "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin" # https://github.com/git-quick-stats/git-quick-stats#macos-homebrew

# Add bin directories to path
fish_add_path --prepend (path filter \
	$HOME/bin \
	$HOME/.bin \
	$HOME/.local/bin \
	$HOME/.cargo/bin \
	$WEBOS_CLI_TV \
	$HOME/stv-tools/tizen-studio/tools/ide/bin \
	node_modules/.bin
)

# -- VSCODE ------------------------------------------------------------------------------------------------------------

string match -q "$TERM_PROGRAM" vscode
and . (code --locate-shell-integration-path fish)

# -- OTHER -------------------------------------------------------------------------------------------------------------

set -gx BAT_THEME $CATPPUCCIN_FLAVOR
set -gx SHELL (which fish)

set -gx _GIT_PATHSPEC ":!package-lock.json" # https://git-quick-stats.sh/#docs
